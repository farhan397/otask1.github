Internee Task 2 
Sign-up for free NASA API key https://api.nasa.gov/index.html#apply-for-an-api-key to use the MARS PHOTOS API - https://api.nasa.gov/api.html#MarsPhotos for this project. Sign-up for free BOX API

Task description
Design, create and style a responsive search form that allows user to search for Mars rovers captured photos provided by the API.
Form fields:

1-date taken (range: from-to)
2-rover (multiple choice)
3-camera (multiple choice; only the 3 cameras that are present on all rovers)
	Once the search form is submitted, retreive results from API and display a paginated/lazy loading grid with result images (thumbnails with date taken, rover name).

	Thumbnail images can be clicked/tapped - displaying full screen/modal window with larger image.

	Images can be added to basket/cart, displayed below the search results.

	Images added to basket/cart can be moved (order in the cart can be changed). Can be removed (remove one, remove all from basket)

	Once 10 photos are added, display/enable 'Start Grid' button

	Once clicked, display a grid of images (tiles) one by one. 
	Use all 10 images selected in step 5. Images can and should repeat. 
	Once full viewport is filled with tiles, rotate them randomly (one image at	` a time). 
	Sample effect can be observed at Youtube video linked below:
	https://www.youtube.com/watch?v=peudGV9jbAE 


https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&page=2&api_key=DEMO_KEY
https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera=fhaz&api_key=DEMO_KEY
https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY
https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&api_key=DEMO_KEY


///3
import React, { useState } from "react";
import { Form, Col, Row, Button, Modal, Container } from "react-bootstrap";
import axios from "axios";

const RoverPhotoSearchForm = () => {
  const [dateFrom, setDateFrom] = useState("");
  const [dateTo, setDateTo] = useState("");
  const [rover, setRover] = useState("");
  const [photos, setPhotos] = useState([]);
  const [cart, setCart] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [startIndex, setStartIndex] = useState(0);

  const handleAddToCart = (photo) => {
    setCart([...cart, photo]);
  };

  const handleRemoveFromCart = (index) => {
    const newCart = [...cart];
    newCart.splice(index, 1);
    setCart(newCart);
  };

  const handleMoveUpInCart = (index) => {
    if (index === 0) return;
    const newCart = [...cart];
    const temp = newCart[index];
    newCart[index] = newCart[index - 1];
    newCart[index - 1] = temp;
    setCart(newCart);
  };

  const handleMoveDownInCart = (index) => {
    if (index === cart.length - 1) return;
    const newCart = [...cart];
    const temp = newCart[index];
    newCart[index] = newCart[index + 1];
    newCart[index + 1] = temp;
    setCart(newCart);
  };

  const handleStartGrid = () => {
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  const handleModalExited = () => {
    setStartIndex(0);
  };

  const handleModalEnter = () => {
    setStartIndex(Math.floor(Math.random() * cart.length));
  };

  const renderCart = () => {
    return (
      <div>
        <h3>Cart:</h3>
        {cart.map((photo, index) => (
          <div key={photo.id} className="mb-3">
            <img src={photo.img_src} alt={photo.id} className="img-thumbnail" />
            <div className="mt-2">
              <Button variant="primary" onClick={() => handleMoveUpInCart(index)}>
                Up
              </Button>{" "}
              <Button variant="primary" onClick={() => handleMoveDownInCart(index)}>
                Down
              </Button>{" "}
              <Button variant="danger" onClick={() => handleRemoveFromCart(index)}>
                Remove
              </Button>
            </div>
          </div>
        ))}
        {cart.length >= 10 && (
          <Button variant="primary" onClick={handleStartGrid}>
            Start Grid
          </Button>
        )}
      </div>
    );
  };

  const renderModalBody = () => {
    const endIndex = startIndex + 9;
    const photosToDisplay = [];
    for (let i = startIndex; i <= endIndex; i++) {
      const index = i % cart.length;
      photosToDisplay.push(cart[index]);
    }
    const gridItems = photosToDisplay.map((photo) => (
      <Col md={4} key={photo.id}>
        <img src={photo.img_src} alt={photo.id} className="img-fluid" />
      </Col>
    ));
    return (
      <Container>
        <Row>{gridItems}</Row>
      </Container>
    );
  };

  const handleSubmit =const handleSubmit = async (event) => {
event.preventDefault();
try {
const response = await axios.get(https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos, {
params: {
earth_date: ${dateFrom},${dateTo},
camera: "FHAZ,RHAZ,NAVCAM",
api_key: "YOUR_API_KEY_HERE",
},
});
setPhotos(response.data.photos);
} catch (error) {
console.error(error);
}
};

const renderPhotos = () => {
return (
<Row>
{photos.map((photo) => (
<Col md={4} key={photo.id}>
<div className="mb-3">
<img src={photo.img_src} alt={photo.id} className="img-thumbnail" />
<div className="mt-2">
<p>Date taken: {photo.earth_date}</p>
<p>Rover: {photo.rover.name}</p>
<Button variant="primary" onClick={() => handleAddToCart(photo)}>
Add to cart
</Button>
</div>
</div>
</Col>
))}
</Row>
);
};

return (
<div>
<Form onSubmit={handleSubmit}>
<Form.Row>
<Col>
<Form.Label>Date from:</Form.Label>
<Form.Control type="date" value={dateFrom} onChange={(e) => setDateFrom(e.target.value)} required />
</Col>
<Col>
<Form.Label>Date to:</Form.Label>
<Form.Control type="date" value={dateTo} onChange={(e) => setDateTo(e.target.value)} required />
</Col>
<Col>
<Form.Label>Rover:</Form.Label>
<Form.Control as="select" value={rover} onChange={(e) => setRover(e.target.value)} required>
<option value="">Select rover...</option>
<option value="curiosity">Curiosity</option>
<option value="opportunity">Opportunity</option>
<option value="spirit">Spirit</option>
</Form.Control>
</Col>
<Col>
<Button variant="primary" type="submit">
Search
</Button>
</Col>
</Form.Row>
</Form>
{photos.length > 0 && renderPhotos()}
{cart.length > 0 && renderCart()}
<Modal show={showModal} onHide={handleCloseModal} onExited={handleModalExited} onEnter={handleModalEnter}>
<Modal.Header closeButton>
<Modal.Title>Grid of images</Modal.Title>
</Modal.Header>
<Modal.Body>{renderModalBody()}</Modal.Body>
<Modal.Footer>
<Button variant="secondary" onClick={handleCloseModal}>
Close
</Button>
</Modal.Footer>
</Modal>
</div>
);
};

export default RoverPhotoSearchForm;s
